{%- macro CLASS_NAME(entity_name) -%}
  {{ entity_name.title() | replace("_", "") }}
{%- endmacro -%}

{% macro ENTITY(name, classmethod) %}
  {% if classmethod %}@classmethod{% endif %}
  def {{ name }}(*args, **dargs):
    raise NotImplementedError("{{name}}")
{% endmacro %}

{% macro BASE_CLASS(name, verbs) %}
class {{ CLASS_NAME(name) }}(EntityBase):
  {% if verbs | length == 0 %}pass{% endif %}
  {% for verb_data in verbs %}
    {{ ENTITY(**verb_data) }}
  {% endfor %}
{% endmacro %}

{% macro TEMPLATE(entities) %}
  {% for entity_data in entities %}
    {{ BASE_CLASS(**entity_data) }}
  {% endfor %}
{% endmacro %}

class NoSuchItemException(Exception):
    pass

class EntityBase:
    CLIENT = None
    NOUN = None

    def set_attr(self, key, val):
        # TODO Resolve related enities here
        self.__setattr__(key, val)

    @classmethod
    def _from_response(cls, response):
        inst = cls()
        for key, val in response.items():
            inst.set_attr(key, val)
        return inst

    @classmethod
    def create(cls, **data):
        response = cls.CLIENT.create(cls.NOUN, data)
        return cls._from_response(response)

    @classmethod
    def query(cls, *args, **kwargs):
        response = cls.CLIENT.list(cls.NOUN)
        return [cls._from_response(i) for i in response]

    @classmethod
    def from_id(cls, _id, *args, **kwargs):
        response = cls.CLIENT.retrieve(cls.NOUN, _id)
        return cls._from_response(response)

    @classmethod
    def from_name(cls, name, *args, **kwargs):
        # TODO this quite inefficient right now and lists all items available to the user and assumes there is a
        #  unique contraints on the name within that list

        all_items = cls.CLIENT.list(cls.NOUN)
        # TODO should use pandas or something here
        for i in all_items:
            if i.get('name') == name:
                return cls._from_response(i)
        raise NoSuchItemException(f'There is no {cls.NOUN} named {name}')

    def refresh(self):
        response = self.CLIENT.retrieve(self.NOUN, self.id)
        for key, val in response.items():
            self.set_attr(key, val)

    def update(self, **data):
        response = self.CLIENT.update(self.NOUN, self.id,  data)
        return self._from_response(response)

    def destroy(self):
        response = self.CLIENT.delete(self.NOUN, self.id)
        return {}

    def _do_verb(self, verb, data):
        # TODO THIS SHOULD GET REMOVED ELSEWHERE PERHAPS
        if 'remote' in data:
           data.pop('remote')
        response = self.CLIENT.action(self.NOUN, self.id, verb, data)
        return self._from_response(response)

    def retrieve(self):
        return self
    @property
    def printable_json(self):
        # SHOULD RETURN A DICTIONARY WITH THE KEYS TO BE PRINT FOR USER
        # SHOULD BE OVERRIDDEN IN SUBCLASSES DEFUALTS TO PRINTING MOST ATTRIBUTES
        return {k: v for k, v in self.__dict__.items() if not k.startswith("_")}


{{ TEMPLATE(**vars()) }}